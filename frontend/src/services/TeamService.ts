// Service functions for team-related API calls

import axios, { AxiosRequestConfig } from 'axios';
import { Team, Player } from '../contexts/TeamContext';

const API = 'http://localhost:5000/api/teams';

// Create a reusable Axios instance
const api = axios.create({
  baseURL: API,
  withCredentials: true,
});

// Attach the Authorization header automatically if token exists
api.interceptors.request.use(config => {
  /*The token is generated by the server and then sent to the client.
  The client stores the token in localStorage or sessionStorage.*/
  const token = sessionStorage.getItem('token');
  // If token exists, set it in the Authorization header
  // This allows the server to verify the user's identity for protected routes
  if (token) {
    // Ensure headers object exists
    config.headers = config.headers || {};
    // Set the Authorization header with the Bearer token
    // The Bearer token is a common way to send access tokens in HTTP headers
    config.headers['Authorization'] = `Bearer ${token}`;
  }
  // Return the modified config object
  return config;
});

// Generic helpers for requests
async function apiGet<T>(url: string, config?: AxiosRequestConfig) {
  const res = await api.get<T>(url, config);
  return res.data;
}

async function apiPost<T>(url: string, data?: any, config?: AxiosRequestConfig) {
  const res = await api.post<T>(url, data, config);
  return res.data;
}

async function apiPut<T>(url: string, data?: any, config?: AxiosRequestConfig) {
  const res = await api.put<T>(url, data, config);
  return res.data;
}

async function apiDelete<T>(url: string, config?: AxiosRequestConfig) {
  const res = await api.delete<T>(url, config);
  return res.data;
}

// Get all teams for the authenticated user
export async function getTeams(): Promise<Team[]> {
  return apiGet<Team[]>('/');
}

// Create a new team
export async function createTeam(team: Omit<Team, '_id'>) {
  return apiPost<Team>('/', team);
}

// Update a team
export async function updateTeam(id: string, team: Partial<Team>) {
  return apiPut<Team>(`/${id}`, team);
}

// Delete a team
export async function deleteTeam(id: string) {
  return apiDelete<Team>(`/${id}`);
}

// Add a player to a team
export async function addPlayer(teamId: string, player: Omit<Player, '_id'>) {
  return apiPost<Player>(`/${teamId}/players`, player);
}

// Update a player
export async function updatePlayer(teamId: string, playerId: string, player: Partial<Player>) {
  return apiPut<Player>(`/${teamId}/players/${playerId}`, player);
}

// Delete a player
export async function deletePlayer(teamId: string, playerId: string) {
  return apiDelete<Player>(`/${teamId}/players/${playerId}`);
}